; 必须包含的 supervisord 部分
[supervisord]
logfile = %(ENV_LOG_DIR)s/supervisord.log   ; Supervisor自己的日志文件
logfile_maxbytes = 10MB                     ; 日志文件最大大小
logfile_backups = 5                         ; 保留的日志备份数量
pidfile = %(ENV_LOG_DIR)s/supervisord.pid   ; PID文件路径
nodaemon = false                            ; 是否在前台运行（生产环境应为false）

[unix_http_server]
file = /tmp/transhub_supervisor.sock  ; 这个socket是supervisord的通信端点
; 使用supervisorctl命令时需要连接到这个socket，用户名和密码无需修改，与下面的[supervisorctl]部分对应
chmod = 0700                          ; socket的权限
username = transhub_supervisor_user     ; 用户名
password = transhub_supervisor_pwd      ; 密码

[supervisorctl]
; 关键配置：指定如何连接到supervisord
serverurl = unix:///tmp/transhub_supervisor.sock  ; 使用与上面相同的socket
username = transhub_supervisor_user  ; 用户名，与上面一致
password = transhub_supervisor_pwd   ; 密码，与上面一致

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; 下面是各个程序的配置
[program:flask_app]
command = gunicorn run:app -w %(ENV_GUNICORN_WORKERS)s --threads %(ENV_GUNICORN_THREADS)s -b %(ENV_GUNICORN_ADDRESS)s --access-logfile %(ENV_LOG_DIR)s/flask_app.access.log
;directory=/path/to/project
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 10       ; 启动 10 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
;user=your_username  ; 用哪个用户启动
stderr_logfile = %(ENV_LOG_DIR)s/flask_app.err.log
stdout_logfile = %(ENV_LOG_DIR)s/flask_app.out.log
logfile_maxbytes = 50MB           ; 日志文件最大大小
logfile_backups = 10              ; 保留的日志备份数量

[program:dramatiq_worker-cc_training]
command = dramatiq app_backend.jobs.cctraining_job --processes %(ENV_DRAMATIQ_PROCESSES)s --threads %(ENV_DRAMATIQ_THREADS)s --queues cc_training
;directory=/path/to/project
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 10       ; 启动 10 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
;user=your_username  ; 用哪个用户启动
stderr_logfile = %(ENV_LOG_DIR)s/dramatiq-cc_training.err.log
stdout_logfile = %(ENV_LOG_DIR)s/dramatiq-cc_training.out.log
logfile_maxbytes = 50MB           ; 日志文件最大大小
logfile_backups = 10              ; 保留的日志备份数量
;environment = MY_ENV_VAR="value" ; 可选环境变量

[program:dramatiq_worker-graph]
command = dramatiq app_backend.jobs.graph_job --processes 1 --threads %(ENV_DRAMATIQ_THREADS_GRAPH)s --queues graph
;directory=/path/to/project
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 10       ; 启动 10 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
;user=your_username  ; 用哪个用户启动
stderr_logfile = %(ENV_LOG_DIR)s/dramatiq-graph.err.log
stdout_logfile = %(ENV_LOG_DIR)s/dramatiq-graph.out.log
logfile_maxbytes = 50MB           ; 日志文件最大大小
logfile_backups = 10              ; 保留的日志备份数量
;environment = MY_ENV_VAR="value" ; 可选环境变量

; 压缩任务限定为单进程单线程
[program:dramatiq_worker-svg2png]
command = dramatiq app_backend.jobs.graph_job --processes 1 --threads 1 --queues svg2png
;directory=/path/to/project
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 10       ; 启动 10 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
;user=your_username  ; 用哪个用户启动
stderr_logfile = %(ENV_LOG_DIR)s/dramatiq-svg2png.err.log
stdout_logfile = %(ENV_LOG_DIR)s/dramatiq-svg2png.out.log
logfile_maxbytes = 50MB           ; 日志文件最大大小
logfile_backups = 10              ; 保留的日志备份数量
;environment = MY_ENV_VAR="value" ; 可选环境变量
