# Transhub Backend 环境变量配置模板
# 复制此文件为 .env.development 或 .env.production 并修改相应的值
# ！真实的配置文件请不要提交到版本控制系统git中，建议添加到 .gitignore 中

# ================================
# 应用基础配置
# ================================
APP_NAME="Transhub Backend"
# 环境类型 (填 development 或 production)
FLASK_ENV=
# 开发环境开启调试模式，生产环境关闭调试模式
# 调试模式下会显示详细错误信息，修改代码后自动重载
# 调试模式，开启填 true，生产环境可不填
FLASK_DEBUG=

# ================================
# 测评配置
# ================================
# 评测程序sender的最大窗口（必须设置为正整数），避免用户算法设置过大窗口影响服务器性能
# 单位为数据包数量，实际窗口配置应根据trace的相关环境（例如带宽、时延）进行设置
# 理论上不应低于所有trace中的最大BDP，建议设置后进行实测，如果设置过低将导致吞吐量下降
SENDER_MAX_WINDOW_SIZE=

# ================================
# 目录配置
# ================================
# 应用数据基础目录，包含课程数据、用户数据、日志等
# example: ~/home/transhub_data
BASEDIR=
# 日志目录，不用修改
LOG_DIR="${BASEDIR}/logs"

# ================================
# 安全配置
# ================================
# Flask 密钥 (不设置则自动生成，生产环境建议手动设置)
# 建议手动设置，不然每次重启应用都会生成新的密钥，会导致用户登录状态丢失
# example: e76a0f712682a8816ea0b8fdb5a937c216450008fcc652da932f845e82691300
FLASK_SECRET_KEY=
# JWT 密钥 (不设置则自动生成，生产环境建议手动设置)
# 建议手动设置，不然每次重启应用都会生成新的密钥，会导致用户登录状态丢失
# example: 9357aff9279e83c748714d47de0d2077c1b52bdbc31ae9aff5e8da08595d7721
FLASK_JWT_SECRET_KEY=
# JWT 令牌过期时间 (秒)，超过此时间后，用户需要重新登录
# example: 432000 = 5*24*60*60 (5天)
FLASK_JWT_ACCESS_TOKEN_EXPIRES=432000

# ================================
# 超级管理员配置
# ================================
# 超级管理员用户名
SUPER_ADMIN_USERNAME=admin
# 超级管理员密码
SUPER_ADMIN_PASSWORD=
# 超级管理员真实姓名
SUPER_ADMIN_REAL_NAME=系统管理员

# ================================
# 数据库配置
# ================================
# MySQL 数据库用户名
MYSQL_USERNAME=root
MYSQL_PASSWORD=123456
# MySQL 数据库地址和端口，example: localhost:3306
MYSQL_ADDRESS=localhost:3306
# 数据库名称，example: transhub_base
MYSQL_DBNAME=
# SQLAlchemy 数据库连接字符串，不用修改
FLASK_SQLALCHEMY_DATABASE_URI="mysql+pymysql://${MYSQL_USERNAME}:${MYSQL_PASSWORD}@${MYSQL_ADDRESS}/${MYSQL_DBNAME}"

# ================================
# Redis 配置
# ================================
# Redis 主机地址
REDIS_HOST=localhost
# Redis 端口，默认是 6379
REDIS_PORT=6379
# Redis 数据库索引，默认是 0
REDIS_DB=0
# Redis 密码，如果没有设置密码可以留空
REDIS_PASSWORD=
# Redis URL，Flask-Redis 使用的连接字符串，不用修改
FLASK_REDIS_URL="redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}"

# ================================
# 日志配置
# ================================
# 日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# 生产环境不建议开启DEBUG，会影响性能
LOG_LEVEL=DEBUG
# 日志文件最大大小 (字节)，超过此大小会进行轮转
# example: 10485760 = 10MB
LOG_MAX_BYTES=10485760
# 日志文件备份数量，超过此数量的旧日志会被删除
LOG_BACKUP_COUNT=5
# 日志文件名
LOG_FILENAME=app.log

# ================================
# 服务器配置
# 仅适用于生产环境，使用supervisor_manager.sh脚本启动时有效
# ================================
# 后端 Gunicorn 服务器监听地址和端口
# 服务器监听地址和端口，仅生产环境有效，开发环境请直接在 run.py 中设置
# 设置为localhost或127.0.0.1时，只能本地访问。
# 生产环境如果设置为上述地址，需要使用反向代理（如Nginx）来处理外部请求；否则应设置为网卡地址。
GUNICORN_ADDRESS=127.0.0.1:54321
# Gunicorn 工作进程数，建议根据 CPU 核心数设置
GUNICORN_WORKERS=4
# Gunicorn 线程数，建议根据应用负载设置
GUNICORN_THREADS=2

# ================================
# 任务队列配置
# 仅适用于生产环境，使用supervisor_manager.sh脚本启动时有效
# ================================
# Dramatiq 进程数，建议根据 CPU 核心数设置
DRAMATIQ_PROCESSES=4
# Dramatiq 线程数，建议根据应用负载设置
DRAMATIQ_THREADS=2

# ================================
# CORS 配置
# ================================
# 允许的跨域源 (用逗号分隔，开发环境可以使用 *)
CORS_ORIGINS=*
